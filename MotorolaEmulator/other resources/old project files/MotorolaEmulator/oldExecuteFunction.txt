bool MainWindow::executeInstruction(){
    //bool H = (flags >> 5) & 0x01;
    //bool I = (flags >> 4) & 0x01;
    //bool N = (flags >> 3) & 0x01;
    //bool A = (flags >> 2) & 0x01;
    //bool V = (flags >> 1) & 0x01;
    //bool C = flags & 0x01;
    //false je x true je y
    uint16_t tempVar = 0;
    uint16_t tempVar2 = 0;
    int8_t tempSigned8 = 0;
    int8_t tempSigned82 = 0;
    uint16_t* curIndReg = &xRegister;

    if (indexRegister) {
        curIndReg = &xRegister;
    } else {
        //curIndReg = &yRegister;
    }
    switch(Memory[PC]){
    case 0x00:
        executionTimer->stop();
        running = false;
        break;
    case 0x01:
        //NOP
        break;
    case 0x02:

        break;
    case 0x03:

        break;
    case 0x04:

        break;
    case 0x05:

        break;
    case 0x06:
        updateFlags(HalfCarry, bit(aReg, 5));
        updateFlags(InterruptMask, bit(aReg, 4));
        updateFlags(Negative, bit(aReg, 3));
        updateFlags(Zero, bit(aReg, 2));
        updateFlags(Overflow, bit(aReg, 1));
        updateFlags(Carry, bit(aReg, 0));
        break;
    case 0x07:
        aReg = flags;
        aReg |= (1 << 7);
        aReg |= (1 << 6);
        break;
    case 0x08:
        (*curIndReg)++;
        updateFlags(Zero, (*curIndReg) == 0);
        updateElement(regX);
        break;
    case 0x09:
        (*curIndReg)--;
        updateFlags(Zero, (*curIndReg) == 0);
        updateElement(regX);
        break;
    case 0x0A:
        updateFlags(Overflow, 0);
        break;
    case 0x0B:
        updateFlags(Overflow, 1);
        break;
    case 0x0C:
        updateFlags(Carry, 0);
        break;
    case 0x0D:
        updateFlags(Carry, 1);
        break;
    case 0x0E:
        updateFlags(InterruptMask, 0);
        break;
    case 0x0F:
        updateFlags(InterruptMask, 1);
        break;
    case 0x10:
        tempVar = aReg - bReg;
        updateFlags(Negative, bit(tempVar, 7));
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,(bit(aReg, 7) && !bit(bReg, 7)  && !bit(tempVar, 7)) || (!bit(aReg, 7)  && bit(bReg, 7)  && bit(tempVar, 7)));
        updateFlags(Carry,((!bit(aReg, 7) && bit(bReg, 7)) || (bit(bReg, 7) && bit(tempVar, 7)) || (bit(tempVar, 7)&& !bit(aReg, 7))));
        aReg = tempVar;
        break;
    case 0x11:
        tempVar = aReg - bReg;
        updateFlags(Negative, bit(tempVar, 7));
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,(bit(aReg, 7) && !bit(bReg, 7)  && !bit(tempVar, 7)) || (!bit(aReg, 7)  && bit(bReg, 7)  && bit(tempVar, 7)));
         updateFlags(Carry,((!bit(aReg, 7) && bit(bReg, 7)) || (bit(bReg, 7) && bit(tempVar, 7)) || (bit(tempVar, 7) && !bit(aReg, 7))));
        break;
    case 0x12:

        break;
    case 0x13:

        break;
    case 0x14:

        break;
    case 0x15:

        break;
    case 0x16:
        bReg = aReg;
        updateFlags(Negative, bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        updateElement(regB);
        break;
    case 0x17:
        aReg = bReg;
        updateFlags(Negative, bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        updateElement(regA);
        break;
    case 0x18:

        break;
    case 0x19:
        int c;
        int h;
        int up;
        int low;
        c = flags & 0x01;
        h = bit(flags, 5);
        up = aReg >> 4;
        low = aReg % 0xF;
        if (!c && up >= 0 && up <= 9 && !h && low >= 0 && low <= 9){
            aReg+=0x0;
            updateFlags(Carry,0);
        }else if (!c && up >= 0 && up <= 8 && !h && low >= 0xA && low <= 0xF){
            aReg+=0x6;
            updateFlags(Carry,0);
        }else if (!c && up >= 0 && up <= 9 && h && low >= 0 && low <= 3){
            aReg+=0x6;
            updateFlags(Carry,0);
        }else if (!c && up >= 0xA && up <= 0xF && !h && low >= 0 && low <= 9){
            aReg+=0x60;
            updateFlags(Carry,1);
        }else if (!c && up >= 9 && up <= 0xF && !h && low >= 0xA && low <= 0xF){
            aReg+=0x66;
            updateFlags(Carry,1);
        }else if (!c && up >= 0xA && up <= 0xF && h && low >= 0 && low <= 3){
            aReg+=0x66;
            updateFlags(Carry,1);
        }else if (c && up >= 0 && up <= 2 && !h && low >= 0 && low <= 9){
            aReg+=0x60;
            updateFlags(Carry,1);
        }else if (c && up >= 0 && up <= 2 && !h && low >= 0xA && low <= 0xF){
            aReg+=0x66;
            updateFlags(Carry,1);
        }else if (c && up >= 0 && up <= 3 && h && low >= 0 && low <= 3){
            aReg+=0x66;
            updateFlags(Carry,1);
        }
        updateFlags(Negative, bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateElement(regA);
        break;
    case 0x1A:

        break;
    case 0x1B:
        tempVar = aReg + bReg;
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        updateFlags(HalfCarry, (bit(aReg, 7) && bit(bReg, 7)) || (bit(aReg, 7) && !bit(tempVar, 7)) || (!bit(tempVar, 7) && bit(bReg, 7)));
        updateFlags(Overflow,(bit(aReg, 7) && bit(bReg, 7)  && !bit(tempVar, 7)) || (!bit(aReg, 7)  && !bit(bReg, 7)  && bit(tempVar, 7)));
        aReg = static_cast<uint8_t>(tempVar);
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateElement(regA);
        break;
    case 0x1C:

        break;
    case 0x1D:

        break;
    case 0x1E:

        break;
    case 0x1F:

        break;
    case 0x20:
        tempSigned8 = Memory[(PC + 1) % 0xFFFF];
        PC += tempSigned8 + 1;
        break;
    case 0x21:

        break;
    case 0x22:
        if ((bit(flags, 2) || (flags & 0x01)) == 0)
        {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x23:
        if (bit(flags, 2) || (flags & 0x01))
        {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x24:
        if ((flags & 0x01) == 0){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x25:
        if ((flags & 0x01)){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x26:
        if (bit(flags, 2) == 0){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x27:
        if (bit(flags, 2)) {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x28:
        if (bit(flags, 1) == 0){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x29:
        if (bit(flags, 1)){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x2A:
        if (bit(flags, 3) == 0){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x2B:
        if (bit(flags, 3)){
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x2C:
        if ((bit(flags, 3) ^ (flags & 0x01)) == 0)
        {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x2D:
        if (bit(flags, 3) ^ (flags & 0x01))
        {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x2E:
        if ((bit(flags, 2) || (bit(flags, 3) ^ bit(flags, 1))) == 0)
        {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x2F:
        if (bit(flags, 2) || (bit(flags, 3) ^ bit(flags, 1)))
        {
            tempSigned8 = Memory[(PC + 1) % 0xFFFF];
            PC += tempSigned8;
        }
        PC++;
        break;
    case 0x30:
        (*curIndReg) = SP + 1;
        updateElement(regX);
        break;
    case 0x31:
        SP++;
        updateElement(regSP);
        break;
    case 0x32:
        SP++;
        aReg = Memory[SP];
        updateElement(regSP);
        updateElement(regA);
        break;
    case 0x33:
        SP++;
        bReg = Memory[SP];
        updateElement(regSP);
        updateElement(regB);
        break;
    case 0x34:
        SP--;
        updateElement(regSP);
        break;
    case 0x35:
        SP = (*curIndReg) - 1;
        updateElement(regSP);
        break;
    case 0x36:
        Memory[SP] = aReg;
        updateMemoryCell(SP);
        SP--;
        updateElement(regSP);
        break;
    case 0x37:
        Memory[SP] = bReg;
        updateMemoryCell(SP);
        SP--;
        updateElement(regSP);
        break;
    case 0x38:

        break;
    case 0x39:
        SP++;
        PC = Memory[SP] << 8;
        SP++;
        PC += Memory[SP] - 1;
        updateElement(regSP);
        break;
    case 0x3A:

        break;
    case 0x3B:

        break;
    case 0x3C:

        break;
    case 0x3D:

        break;
    case 0x3E:

        break;
    case 0x3F:

        break;
    case 0x40:
        aReg = 0x0 - aReg;
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,aReg == 0x80);
        updateFlags(Carry,aReg != 0);
        updateElement(regA);
        break;
    case 0x41:

        break;
    case 0x42:

        break;
    case 0x43:
        aReg = 0xFF - aReg;
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,1);
        updateElement(regA);
        break;
    case 0x44:
        tempVar = (aReg & 0x1);
        aReg = (aReg >> 1);
        updateFlags(Negative,0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,tempVar);
        updateFlags(Carry,tempVar);
        updateElement(regA);
        break;
    case 0x45:

        break;
    case 0x46:
        tempVar = (aReg & 0x01);
        aReg = aReg >> 1;
        aReg += (flags & 0x01) << 7;
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,tempVar ^ bit(aReg, 7));
        updateElement(regA);
        break;
    case 0x47:
        tempVar = (aReg & 0x1);
        aReg = (aReg >> 1)+ bit(aReg, 7);
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,tempVar ^ bit(aReg, 7));
        updateElement(regA);
        break;
    case 0x48:
        tempVar = bit(aReg, 7);
        updateFlags(Carry, tempVar);
        aReg = aReg << 1;
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,tempVar ^ bit(aReg, 7));
        updateElement(regA);
        break;
    case 0x49:
        tempVar = bit(aReg, 7);
        aReg = (aReg << 1) + (flags & 0x01);
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,tempVar ^ bit(aReg, 7));
        updateElement(regA);
        break;
    case 0x4A:
        updateFlags(Overflow, aReg == 0x80);
        aReg--;
        updateFlags(Negative, bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateElement(regA);
        break;
    case 0x4B:

        break;
    case 0x4C:
        updateFlags(Overflow, aReg == 0x7F);
        aReg++;
        updateFlags(Negative, bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateElement(regA);
        break;
    case 0x4D:
        updateFlags(Negative, bit(aReg, 7));
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        break;
    case 0x4E:

        break;
    case 0x4F:
        aReg = 0;
        updateFlags(Negative,0);
        updateFlags(Zero, 1);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        updateElement(regA);
        break;
    case 0x50:
        bReg = 0x0 - bReg;
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,bReg == 0x80);
        updateFlags(Carry,bReg != 0);
        updateElement(regB);
        break;
    case 0x51:

        break;
    case 0x52:

        break;
    case 0x53:
        bReg = 0xFF - bReg;
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,1);
        updateElement(regB);
        break;
    case 0x54:
        tempVar = (bReg & 0x1);
        bReg = (bReg >> 1);
        updateFlags(Negative,0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,tempVar);
        updateFlags(Carry,tempVar);
        updateElement(regB);
        break;
    case 0x55:

        break;
    case 0x56:
        tempVar = (bReg & 0x01);
        bReg = bReg >> 1;
        bReg += (flags & 0x01) << 7;
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,tempVar ^ bit(bReg, 7));
        updateElement(regB);
        break;
    case 0x57:
        tempVar = (bReg & 0x1);
        bReg = (bReg >> 1)+bit(bReg, 7);
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,tempVar ^ bit(bReg, 7));
        updateElement(regB);
        break;
    case 0x58:
        tempVar = bit(bReg, 7);
        updateFlags(Carry, tempVar);
        bReg = bReg << 1;
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,tempVar ^ bit(bReg, 7));
        updateElement(regB);
        break;
    case 0x59:
        tempVar = bit(bReg, 7);
        bReg = bReg << 1;
        bReg += flags & 0x01;
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,tempVar ^ bit(bReg, 7));
        updateElement(regB);
        break;
    case 0x5A:
        updateFlags(Overflow, bReg == 0x80);
        bReg--;
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateElement(regB);
        break;
    case 0x5B:

        break;
    case 0x5C:
        updateFlags(Overflow, bReg == 0x7F);
        bReg++;
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateElement(regB);
        break;
    case 0x5D:
        updateFlags(Negative,bit(bReg, 7));
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        break;
    case 0x5E:

        break;
    case 0x5F:
        bReg = 0;
        updateFlags(Negative,0);
        updateFlags(Zero, 1);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        updateElement(regB);
        break;
    case 0x60:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        Memory[tempVar] = 0x0 - Memory[tempVar];
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,Memory[tempVar] == 0x80);
        updateFlags(Carry,Memory[tempVar] != 0);
        updateMemoryCell(tempVar);
        PC++;
        break;
    case 0x61:

        break;
    case 0x62:

        break;
    case 0x63:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        Memory[tempVar] = 0xFF - Memory[tempVar];
        updateFlags(Negative,bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,1);
        updateMemoryCell(tempVar);
        PC++;
        break;
    case 0x64:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        tempVar = (Memory[tempVar2] & 0x1);
        Memory[tempVar2] = (Memory[tempVar2] >> 1);
        updateFlags(Negative,0);
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow,tempVar);
        updateFlags(Carry,tempVar);
        updateMemoryCell(tempVar);
        PC++;
        break;
    case 0x65:

        break;
    case 0x66:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        tempVar = (Memory[tempVar2] & 0x01);
        Memory[tempVar2] = Memory[tempVar2] >> 1;
        Memory[tempVar2] += (flags & 0x01) << 7;
        updateFlags(Carry, tempVar);
        updateFlags(Negative, bit(Memory[tempVar2], 7));
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow,tempVar ^ bit(Memory[tempVar2], 7));
        PC++;
        updateMemoryCell(tempVar2);
        break;
    case 0x67:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        tempVar = (Memory[tempVar2] & 0x1);
        Memory[tempVar2] = (Memory[tempVar2] >> 1)+(Memory[tempVar2] & 0x80);
        updateFlags(Carry, tempVar);
        updateFlags(Negative, bit(Memory[tempVar2], 7));
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow,tempVar ^ bit(Memory[tempVar2], 7));
        PC++;
        updateMemoryCell(tempVar2);
        break;
    case 0x68:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        tempVar2 = (Memory[tempVar] & 0x80) != 0;
        updateFlags(Carry, tempVar2);
        Memory[tempVar] = Memory[tempVar] << 1;
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,tempVar2 ^ bit(Memory[tempVar], 7));
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0x69:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        tempVar = bit(Memory[tempVar2], 7);
        Memory[tempVar2] = Memory[tempVar2] << 1;
        Memory[tempVar2] += flags & 0x01;
        updateFlags(Carry, tempVar);
        updateFlags(Negative, bit(Memory[tempVar2], 7));
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow, tempVar ^ bit(Memory[tempVar2], 7));
        PC++;
        updateMemoryCell(tempVar2);
        break;
    case 0x6A:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        updateFlags(Overflow, Memory[tempVar] == 0x80);
        Memory[tempVar]--;
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0x6B:

        break;
    case 0x6C:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        updateFlags(Overflow, Memory[tempVar] == 0x7F);
        Memory[tempVar]++;
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateMemoryCell(tempVar);
        PC++;
        break;
    case 0x6D:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        PC++;
        break;
    case 0x6E:
        PC = -1 + ((Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFF);
        break;
    case 0x6F:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        Memory[tempVar] = 0;
        updateFlags(Negative,0);
        updateFlags(Zero, 1);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0x70:
        tempVar = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        Memory[tempVar] = 0x0 - Memory[tempVar];
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,Memory[tempVar] == 0x80);
        updateFlags(Carry,Memory[tempVar] != 0);
        updateMemoryCell(tempVar);
        PC+=2;
        break;
    case 0x71:

        break;
    case 0x72:

        break;
    case 0x73:
        tempVar = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        Memory[tempVar] = 0xFF - Memory[tempVar];
        updateFlags(Negative, bit(Memory[tempVar], 7));
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,1);
        updateMemoryCell(tempVar);
        PC+=2;
        break;
    case 0x74:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        tempVar = (Memory[tempVar2] & 0x1);
        Memory[tempVar2] = (Memory[tempVar2] >> 1);
        updateFlags(Negative,0);
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow,tempVar);
        updateFlags(Carry,tempVar);
        updateMemoryCell(tempVar);
        PC+=2;
        break;
    case 0x75:

        break;
    case 0x76:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        tempVar = (Memory[tempVar2] & 0x01);
        Memory[tempVar2] = Memory[tempVar2] >> 1;
        Memory[tempVar2] += (flags & 0x01) << 7;
        updateFlags(Carry, tempVar);
        updateFlags(Negative, bit(Memory[tempVar2], 7));
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow, tempVar ^ bit(Memory[tempVar2], 7));
        PC+=2;
        updateMemoryCell(tempVar2);
        break;
    case 0x77:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        tempVar = (Memory[tempVar2] & 0x1);
        Memory[tempVar2] = (Memory[tempVar2] >> 1)+(Memory[tempVar2] & 0x80);
        updateFlags(Carry, tempVar);
        updateFlags(Negative, bit(Memory[tempVar2], 7));
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow, tempVar ^ bit(Memory[tempVar2], 7));
        PC+=2;
        updateMemoryCell(tempVar2);
        break;
    case 0x78:
        tempVar = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        tempVar2 = (Memory[tempVar] & 0x80) != 0;
        updateFlags(Carry, tempVar2);
        Memory[tempVar] = Memory[tempVar] << 1;
        updateFlags(Negative,(Memory[tempVar] & 0x80) != 0);
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,(tempVar2)^((Memory[tempVar] & 0x80) != 0));
        PC+=2;
        updateMemoryCell(tempVar);
        break;
    case 0x79:
        tempVar2 = (Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF];
        tempVar = bit(Memory[tempVar2], 7);
        Memory[tempVar2] = Memory[tempVar2] << 1;
        Memory[tempVar2] += flags & 0x01;
        updateFlags(Carry, tempVar);
        updateFlags(Negative,bit(Memory[tempVar2], 7));
        updateFlags(Zero, Memory[tempVar2] == 0);
        updateFlags(Overflow,(tempVar)^bit(Memory[tempVar2], 7));
        PC+=2;
        updateMemoryCell(tempVar2);
        break;
    case 0x7A:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        updateFlags(Overflow, Memory[tempVar] == 0x80);
        Memory[tempVar]--;
        updateFlags(Negative,(Memory[tempVar] & 0x80) != 0);
        updateFlags(Zero, Memory[tempVar] == 0);
        PC+=2;
        updateMemoryCell(tempVar);
        break;
    case 0x7B:

        break;
    case 0x7C:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        updateFlags(Overflow, Memory[tempVar] == 0x7F);
        Memory[tempVar]++;
        updateFlags(Negative,(Memory[tempVar] & 0x80) != 0);
        updateFlags(Zero, Memory[tempVar] == 0);
        PC+=2;
        updateMemoryCell(tempVar);
        break;
    case 0x7D:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        updateFlags(Negative,(Memory[tempVar] & 0x80) != 0);
        updateFlags(Zero, Memory[tempVar] == 0);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        break;
    case 0x7E:
        PC = -1 + ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        break;
    case 0x7F:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        Memory[tempVar] = 0;
        updateFlags(Negative,0);
        updateFlags(Zero, 1);
        updateFlags(Overflow,0);
        updateFlags(Carry,0);
        PC+=2;
        updateMemoryCell(tempVar);
        break;
    case 0x80:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0x81:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        PC++;
        break;
    case 0x82:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = aReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0x83:

        break;
    case 0x84:
        aReg = aReg & Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x85:
        tempVar = aReg & Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        PC++;
        break;
    case 0x86:
        aReg = Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x87:

        break;
    case 0x88:
        aReg = aReg ^ Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x89:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = aReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regA);
        break;
    case 0x8A:
        aReg = aReg | Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x8B:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = aReg + tempVar2;
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regA);
        break;
    case 0x8C:
        tempVar2 = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        tempVar = (*curIndReg) - tempVar2;
        updateFlags(Negative,(tempVar & 0x8000) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,(((*curIndReg) & 0x8000) && !(tempVar2 & 0x8000) && !(tempVar & 0x8000)) || (!((*curIndReg) & 0x8000) && (tempVar2 & 0x8000) && (tempVar & 0x8000)));
        PC+=2;
        break;
    case 0x8D:
        tempSigned8 = Memory[(PC) % 0xFFFF];
        PC+=2;
        Memory[SP] = (PC >> 8) & 0xFF;
        updateMemoryCell(SP);
        Memory[SP - 1] = PC & 0xFF;
        updateMemoryCell(SP-1);
        SP-=2;
        PC += tempSigned8;
        PC--;
        updateElement(regSP);
        break;
    case 0x8E:
        SP = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow, 0);
        PC+=2;
        updateElement(regSP);
        break;
    case 0x8F:

        break;
    case 0x90:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0x91:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        PC++;
        break;
    case 0x92:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = aReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0x93:

        break;
    case 0x94:
        aReg = aReg & Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x95:
        tempVar = aReg & Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        break;
    case 0x96:
        aReg = Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x97:
        tempVar = Memory[(PC+1) % 0xFFFF];
        Memory[tempVar] = aReg;
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0x98:
        aReg = aReg ^ Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x99:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = aReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regA);
        break;
    case 0x9A:
        aReg = aReg | Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0x9B:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = aReg + tempVar2;
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regA);
        break;
    case 0x9C:
        tempVar2 = (Memory[(Memory[(PC+1) % 0xFFFF]+1) % 0xFFFF] + (Memory[Memory[(PC+1) % 0xFFFF]] << 8));
        tempVar = (*curIndReg) - tempVar2;
        updateFlags(Negative,(tempVar & 0x8000) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,(((*curIndReg) & 0x8000) && !(tempVar2 & 0x8000) && !(tempVar & 0x8000)) || (!((*curIndReg) & 0x8000) && (tempVar2 & 0x8000) && (tempVar & 0x8000)));
        PC++;
        break;
    case 0x9D:

        break;
    case 0x9E:
        SP = (Memory[(Memory[(PC+1) % 0xFFFF]+1) % 0xFFFF] + (Memory[Memory[(PC+1) % 0xFFFF]] << 8));
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow, 0);
        PC++;
        updateElement(regSP);
        break;
    case 0x9F:
        tempVar = Memory[(PC+1) % 0xFFFF];
        Memory[tempVar] = SP >> 8;
        Memory[(tempVar + 1) % 0xFFFF] = SP & 0xFF;
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        updateMemoryCell(tempVar + 1);
        break;
    case 0xA0:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xA1:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        PC++;
        break;
    case 0xA2:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = aReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xA3:

        break;
    case 0xA4:
        aReg = aReg & Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0xA5:
        tempVar = aReg & Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        break;
    case 0xA6:
        aReg = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0xA7:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        Memory[tempVar] = aReg;
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0xA8:
        aReg = aReg ^ Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0xA9:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = aReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regA);
        break;
    case 0xAA:
        aReg = aReg | Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regA);
        break;
    case 0xAB:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = aReg + tempVar2;
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regA);
        break;
    case 0xAC:
        tempVar2 = ((Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF]) + (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF] << 8));
        tempVar = (*curIndReg) - tempVar2;
        updateFlags(Negative,(tempVar & 0x8000) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,(((*curIndReg) & 0x8000) && !(tempVar2 & 0x8000) && !(tempVar & 0x8000)) || (!((*curIndReg) & 0x8000) && (tempVar2 & 0x8000) && (tempVar & 0x8000)));
        PC++;
        break;
    case 0xAD:
        PC+=2;
        tempVar = (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF]) + (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF] << 8);
        Memory[SP] = (PC >> 8) & 0xFF;
        updateMemoryCell(SP);
        Memory[SP - 1] = PC & 0xFF;
        updateMemoryCell(SP-1);
        SP-=2;
        PC = tempVar - 1;
        updateElement(regSP);
        break;
    case 0xAE:
        SP = (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF]) + (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF] << 8);
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow, 0);
        PC++;
        updateElement(regSP);
        break;
    case 0xAF:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        Memory[tempVar] = SP >> 8;
        Memory[(tempVar + 1) % 0xFFFF] = SP & 0xFF;
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        updateMemoryCell(tempVar + 1);
        break;
    case 0xB0:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC+=2;
        updateElement(regA);
        break;
    case 0xB1:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = aReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        PC+=2;
        break;
    case 0xB2:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = aReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(aReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(aReg & 0x80))));
        aReg = tempVar;
        PC+=2;
        updateElement(regA);
        break;
    case 0xB3:

        break;
    case 0xB4:
        aReg = aReg & Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(aReg & 0x80) != 0); // Negative flag (N)
        updateFlags(Zero, aReg == 0);  // Zero flag (Z)
        updateFlags(Overflow,0);// Overflow flag (V)
        PC+=2;
        updateElement(regA);
        break;
    case 0xB5:
        tempVar = aReg & Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        break;
    case 0xB6:
        aReg = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(aReg & 0x80) != 0); // Negative flag (N)
        updateFlags(Zero, aReg == 0);  // Zero flag (Z)
        updateFlags(Overflow,0);// Overflow flag (V)
        PC+=2;
        updateElement(regA);
        break;
    case 0xB7:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        Memory[tempVar] = aReg;
        updateFlags(Negative,(aReg & 0x80) != 0); // Negative flag (N)
        updateFlags(Zero, aReg == 0);  // Zero flag (Z)
        updateFlags(Overflow,0);// Overflow flag (V)
        PC+=2;
        updateMemoryCell(tempVar);
        break;
    case 0xB8:
        aReg = aReg ^ Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateElement(regA);
        break;
    case 0xB9:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = aReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC+=2;
        updateElement(regA);
        break;
    case 0xBA:
        aReg = aReg | Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(aReg & 0x80) != 0);
        updateFlags(Zero, aReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateElement(regA);
        break;
    case 0xBB:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = aReg + tempVar2;
        updateFlags(HalfCarry, ((aReg & 0x08) && (tempVar2 & 0x08)) || ((aReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((aReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(aReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        aReg = static_cast<uint8_t>(tempVar);
        PC+=2;
        updateElement(regA);
        break;
    case 0xBC:
        tempVar2 = (Memory[((((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])) + 1) % 0xFFFF] + (Memory[((((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])) + 1) % 0xFFFF] << 8));
        tempVar = (*curIndReg) - tempVar2;
        updateFlags(Negative,(tempVar & 0x8000) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,(((*curIndReg) & 0x8000) && !(tempVar2 & 0x8000) && !(tempVar & 0x8000)) || (!((*curIndReg) & 0x8000) && (tempVar2 & 0x8000) && (tempVar & 0x8000)));
        PC+=2;
        break;
    case 0xBD:

        break;
    case 0xBE:
        SP = (Memory[((((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])) + 1) % 0xFFFF] + (Memory[((((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])) + 1) % 0xFFFF] << 8));
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow, 0);
        PC+=2;
        updateElement(regSP);
        break;
    case 0xBF:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        Memory[tempVar] = SP >> 8;
        Memory[(tempVar + 1) % 0xFFFF] = SP & 0xFF;
        updateFlags(Negative,(SP & 0x8000) != 0);
        updateFlags(Zero, SP == 0);
        updateFlags(Overflow,0);
        PC+= 2;
        updateMemoryCell(tempVar);
        updateMemoryCell(tempVar + 1);
        break;
    case 0xC0:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xC1:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        PC++;
        break;
    case 0xC2:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = bReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xC3:

        break;
    case 0xC4:
        bReg = bReg & Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xC5:
        tempVar = bReg & Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        PC++;
        break;
    case 0xC6:
        bReg = Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xC7:

        break;
    case 0xC8:
        bReg = bReg ^ Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xC9:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = bReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regB);
        break;
    case 0xCA:
        bReg = bReg | Memory[(PC+1) % 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xCB:
        tempVar2 = Memory[(PC+1) % 0xFFFF];
        tempVar = bReg + tempVar2;
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regB);
        break;
    case 0xCC:

        break;
    case 0xCD:

        break;
    case 0xCE:
        (*curIndReg) = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow, 0);
        PC+=2;
        updateElement(regX);
        break;
    case 0xCF:

        break;
    case 0xD0:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xD1:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        PC++;
        break;
    case 0xD2:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = bReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xD3:

        break;
    case 0xD4:
        bReg = bReg & Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xD5:
        tempVar = bReg & Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        break;
    case 0xD6:
        bReg = Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xD7:
        tempVar = Memory[(PC+1) % 0xFFFF];
        Memory[tempVar] = bReg;
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0xD8:
        bReg = bReg ^ Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xD9:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = bReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regB);
        break;
    case 0xDA:
        bReg = bReg | Memory[Memory[(PC+1) % 0xFFFF]];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xDB:
        tempVar2 = Memory[Memory[(PC+1) % 0xFFFF]];
        tempVar = bReg + tempVar2;
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regB);
        break;
    case 0xDC:

        break;
    case 0xDD:

        break;
    case 0xDE:
        (*curIndReg) = (Memory[(Memory[(PC+1) % 0xFFFF]+1) % 0xFFFF] + (Memory[Memory[(PC+1) % 0xFFFF]] << 8));
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow, 0);
        PC++;
        updateElement(regX);
        break;
    case 0xDF:
        tempVar = Memory[(PC+1) % 0xFFFF];
        Memory[tempVar] = (*curIndReg) >> 8;
        Memory[(tempVar + 1) % 0xFFFF] = (*curIndReg) & 0xFF;
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        updateMemoryCell(tempVar + 1);
        break;
    case 0xE0:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xE1:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        PC++;
        break;
    case 0xE2:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = bReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC++;
        updateElement(regA);
        break;
    case 0xE3:

        break;
    case 0xE4:
        bReg = bReg & Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xE5:
        tempVar = bReg & Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        break;
    case 0xE6:
        bReg = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xE7:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF;
        Memory[tempVar] = bReg;
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        break;
    case 0xE8:
        bReg = bReg ^ Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xE9:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = bReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regB);
        break;
    case 0xEA:
        bReg = bReg | Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC++;
        updateElement(regB);
        break;
    case 0xEB:
        tempVar2 = Memory[(Memory[(PC+1) % 0xFFFF] + *curIndReg)% 0xFFFF];
        tempVar = bReg + tempVar2;
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC++;
        updateElement(regB);
        break;
    case 0xEC:

        break;
    case 0xED:

        break;
    case 0xEE:
        (*curIndReg) = (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF]) + (Memory[((Memory[(PC+1) % 0xFFFF] + *curIndReg) + 1 )% 0xFFFF] << 8);
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow, 0);
        PC++;
        updateElement(regX);
        break;
    case 0xEF:
        tempVar = (Memory[(PC+1) % 0xFFFF] + *curIndReg) % 0xFFFF;
        Memory[tempVar] = (*curIndReg) >> 8;
        Memory[(tempVar + 1) % 0xFFFF] = (*curIndReg) & 0xFF;
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow,0);
        PC++;
        updateMemoryCell(tempVar);
        updateMemoryCell(tempVar + 1);
        break;
    case 0xF0:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC+=2;
        updateElement(regA);
        break;
    case 0xF1:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = bReg - tempVar2;
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        PC+=2;
        break;
    case 0xF2:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = bReg - tempVar2 - (flags & 0x1);
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,((!(bReg & 0x80) && (tempVar2 & 0x80)) || ((tempVar2 & 0x80) && (tempVar & 0x80)) || ((tempVar & 0x80) && !(bReg & 0x80))));
        bReg = tempVar;
        PC+=2;
        updateElement(regA);
        break;
    case 0xF3:

        break;
    case 0xF4:
        bReg = bReg & Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateElement(regB);
        break;
    case 0xF5:
        tempVar = bReg & Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,0);
        break;
    case 0xF6:
        bReg = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateElement(regB);
        break;
    case 0xF7:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        Memory[tempVar] = bReg;
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateMemoryCell(tempVar);
        break;
    case 0xF8:
        bReg = bReg ^ Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateElement(regB);
        break;
    case 0xF9:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = bReg + tempVar2 + (flags & 0x01);
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC+=2;
        updateElement(regB);
        break;
    case 0xFA:
        bReg = bReg | Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        updateFlags(Negative,(bReg & 0x80) != 0);
        updateFlags(Zero, bReg == 0);
        updateFlags(Overflow,0);
        PC+=2;
        updateElement(regB);
        break;
    case 0xFB:
        tempVar2 = Memory[((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])];
        tempVar = bReg + tempVar2;
        updateFlags(HalfCarry, ((bReg & 0x08) && (tempVar2 & 0x08)) || ((bReg & 0x08) && !(tempVar & 0x08)) || (!(tempVar & 0x08) && (tempVar2 & 0x08)));

        updateFlags(Negative,(tempVar & 0x80) != 0);
        updateFlags(Zero, tempVar == 0);
        updateFlags(Overflow,((bReg & 0x80) && (tempVar2 & 0x80) && !(tempVar & 0x80)) || (!(bReg & 0x80) && !(tempVar2 & 0x80) && (tempVar & 0x80)));
        updateFlags(Carry,(tempVar >> 8) & 0x01);
        bReg = static_cast<uint8_t>(tempVar);
        PC+=2;
        updateElement(regB);
        break;
    case 0xFC:

        break;
    case 0xFD:

        break;
    case 0xFE:
        (*curIndReg) = (Memory[((((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])) + 1) % 0xFFFF] + (Memory[((((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF])) + 1) % 0xFFFF] << 8));
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow, 0);
        PC+=2;
        updateElement(regX);
        break;
    case 0xFF:
        tempVar = ((Memory[(PC+1) % 0xFFFF] << 8) + Memory[(PC+2) % 0xFFFF]);
        Memory[tempVar] = (*curIndReg) >> 8;
        Memory[(tempVar + 1) % 0xFFFF] = (*curIndReg) & 0xFF;
        updateFlags(Negative,((*curIndReg) & 0x8000) != 0);
        updateFlags(Zero, (*curIndReg) == 0);
        updateFlags(Overflow,0);
        PC+= 2;
        updateMemoryCell(tempVar);
        updateMemoryCell(tempVar + 1);
        break;
    default:
        qDebug() << "memory value above 255";
        break;
    }
    PC++;
    PC = PC % 0xFFFF;
    updateElement(regPC);

    updateSelectionsRunTime(PC);

    return true;
}
